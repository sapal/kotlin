/*
 * Copyright 2010-2013 JetBrains s.r.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jetbrains.jet.codegen.generated;

import junit.framework.Assert;
import junit.framework.Test;
import junit.framework.TestSuite;

import java.io.File;
import java.util.regex.Pattern;
import org.jetbrains.jet.JetTestUtils;
import org.jetbrains.jet.test.InnerTestClasses;
import org.jetbrains.jet.test.TestMetadata;

import org.jetbrains.jet.codegen.generated.AbstractRangesCodegenTest;

/** This class is generated by {@link org.jetbrains.jet.generators.tests.GenerateTests}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/codegen/ranges")
@InnerTestClasses({RangesCodegenTestGenerated.Expression.class, RangesCodegenTestGenerated.Literal.class})
public class RangesCodegenTestGenerated extends AbstractRangesCodegenTest {
    public void testAllFilesPresentInRanges() throws Exception {
        JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/ranges"), Pattern.compile("^(.+)\\.kt$"), true);
    }
    
    @TestMetadata("compiler/testData/codegen/ranges/expression")
    public static class Expression extends AbstractRangesCodegenTest {
        public void testAllFilesPresentInExpression() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/ranges/expression"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("emptyDownto.kt")
        public void testEmptyDownto() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/expression/emptyDownto.kt");
        }
        
        @TestMetadata("emptyRange.kt")
        public void testEmptyRange() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/expression/emptyRange.kt");
        }
        
        @TestMetadata("inexactSteppedDownTo.kt")
        public void testInexactSteppedDownTo() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/expression/inexactSteppedDownTo.kt");
        }
        
        @TestMetadata("inexactSteppedRange.kt")
        public void testInexactSteppedRange() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/expression/inexactSteppedRange.kt");
        }
        
        @TestMetadata("oneElementDownTo.kt")
        public void testOneElementDownTo() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/expression/oneElementDownTo.kt");
        }
        
        @TestMetadata("oneElementRange.kt")
        public void testOneElementRange() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/expression/oneElementRange.kt");
        }
        
        @TestMetadata("reversedBackSequence.kt")
        public void testReversedBackSequence() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/expression/reversedBackSequence.kt");
        }
        
        @TestMetadata("reversedEmptyBackSequence.kt")
        public void testReversedEmptyBackSequence() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/expression/reversedEmptyBackSequence.kt");
        }
        
        @TestMetadata("reversedEmptyRange.kt")
        public void testReversedEmptyRange() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/expression/reversedEmptyRange.kt");
        }
        
        @TestMetadata("reversedInexactSteppedDownTo.kt")
        public void testReversedInexactSteppedDownTo() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/expression/reversedInexactSteppedDownTo.kt");
        }
        
        @TestMetadata("reversedRange.kt")
        public void testReversedRange() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/expression/reversedRange.kt");
        }
        
        @TestMetadata("reversedSimpleSteppedRange.kt")
        public void testReversedSimpleSteppedRange() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/expression/reversedSimpleSteppedRange.kt");
        }
        
        @TestMetadata("simpleDownTo.kt")
        public void testSimpleDownTo() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/expression/simpleDownTo.kt");
        }
        
        @TestMetadata("simpleRange.kt")
        public void testSimpleRange() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/expression/simpleRange.kt");
        }
        
        @TestMetadata("simpleSteppedDownTo.kt")
        public void testSimpleSteppedDownTo() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/expression/simpleSteppedDownTo.kt");
        }
        
        @TestMetadata("simpleSteppedRange.kt")
        public void testSimpleSteppedRange() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/expression/simpleSteppedRange.kt");
        }
        
    }
    
    @TestMetadata("compiler/testData/codegen/ranges/literal")
    public static class Literal extends AbstractRangesCodegenTest {
        public void testAllFilesPresentInLiteral() throws Exception {
            JetTestUtils.assertAllTestsPresentByMetadata(this.getClass(), "org.jetbrains.jet.generators.tests.GenerateTests", new File("compiler/testData/codegen/ranges/literal"), Pattern.compile("^(.+)\\.kt$"), true);
        }
        
        @TestMetadata("emptyDownto.kt")
        public void testEmptyDownto() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/literal/emptyDownto.kt");
        }
        
        @TestMetadata("emptyRange.kt")
        public void testEmptyRange() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/literal/emptyRange.kt");
        }
        
        @TestMetadata("inexactSteppedDownTo.kt")
        public void testInexactSteppedDownTo() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/literal/inexactSteppedDownTo.kt");
        }
        
        @TestMetadata("inexactSteppedRange.kt")
        public void testInexactSteppedRange() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/literal/inexactSteppedRange.kt");
        }
        
        @TestMetadata("oneElementDownTo.kt")
        public void testOneElementDownTo() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/literal/oneElementDownTo.kt");
        }
        
        @TestMetadata("oneElementRange.kt")
        public void testOneElementRange() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/literal/oneElementRange.kt");
        }
        
        @TestMetadata("reversedBackSequence.kt")
        public void testReversedBackSequence() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/literal/reversedBackSequence.kt");
        }
        
        @TestMetadata("reversedEmptyBackSequence.kt")
        public void testReversedEmptyBackSequence() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/literal/reversedEmptyBackSequence.kt");
        }
        
        @TestMetadata("reversedEmptyRange.kt")
        public void testReversedEmptyRange() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/literal/reversedEmptyRange.kt");
        }
        
        @TestMetadata("reversedInexactSteppedDownTo.kt")
        public void testReversedInexactSteppedDownTo() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/literal/reversedInexactSteppedDownTo.kt");
        }
        
        @TestMetadata("reversedRange.kt")
        public void testReversedRange() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/literal/reversedRange.kt");
        }
        
        @TestMetadata("reversedSimpleSteppedRange.kt")
        public void testReversedSimpleSteppedRange() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/literal/reversedSimpleSteppedRange.kt");
        }
        
        @TestMetadata("simpleDownTo.kt")
        public void testSimpleDownTo() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/literal/simpleDownTo.kt");
        }
        
        @TestMetadata("simpleRange.kt")
        public void testSimpleRange() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/literal/simpleRange.kt");
        }
        
        @TestMetadata("simpleSteppedDownTo.kt")
        public void testSimpleSteppedDownTo() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/literal/simpleSteppedDownTo.kt");
        }
        
        @TestMetadata("simpleSteppedRange.kt")
        public void testSimpleSteppedRange() throws Exception {
            blackBoxFileByFullPath("compiler/testData/codegen/ranges/literal/simpleSteppedRange.kt");
        }
        
    }
    
    public static Test suite() {
        TestSuite suite = new TestSuite("RangesCodegenTestGenerated");
        suite.addTestSuite(RangesCodegenTestGenerated.class);
        suite.addTestSuite(Expression.class);
        suite.addTestSuite(Literal.class);
        return suite;
    }
}
